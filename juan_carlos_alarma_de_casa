#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
 
// DECLARAMOS LAS VARIABLES QUE INDICAN LOS PINES QUE VAMOS A UTILIZAR
int BUZZER = 9;
int PIR = 8;
int MAG1 = 10;
int MAG2 = 11;
String CODIGO_ARMADO = "0000";
int TIEMPO_ARMADO = 10000;  //definimos cuanto tiempo tarda en armarse la alarma , segundos que queremos por mil
String CODIGO_DESARME = "1234";
int TIEMPO_DESARME = 10000;  //definimos cuanto tiempo se da para escribir el codigo de desarme , segundos que queremos por mil
int ARMADA = 0;
int TIEMPO;
String ESCRIBE;
const byte rowsCount = 4;
const byte columsCount = 4;
 
char keys[rowsCount][columsCount] = {
   { '1','2','3', 'A' },
   { '4','5','6', 'B' },
   { '7','8','9', 'C' },
   { '*','0','#', 'D' }
};
 
const byte rowPins[rowsCount] = { 11, 10, 9, 8 };
const byte columnPins[columsCount] = { 7, 6, 5, 4 };
 
Keypad keypad = Keypad(makeKeymap(keys), rowPins, columnPins, rowsCount, columsCount);

LiquidCrystal_I2C lcd_i2c(0x27, 16, 2);
 
void setup() {
  // DECLARAMOS LOS MODOS DE LOS PINES UTILIZADOS
  pinMode(BUZZER, OUTPUT);
  pinMode(PIR , INPUT);
  pinMode(MAG1 , INPUT);
  pinMode(MAG2 , INPUT);

  // initialize the LCD
  lcd_i2c.begin();
  lcd_i2c.backlight();
  lcd_i2c.clear();
  escribe = ""; //iniciamos la variable que va a recoger lo que se esta pulsando en el teclado
  lcd_i2c.setCursor(1, 1);
  lcd_i2c.print("INTRODUZCA CODIGO");
  ARMADA = 0;  // Ponemos la alarma en NO ARMADO
}


// TECLA INTRO USAREMOS LA TECLA #
// TECLA LIMPIAR USAREMOS LA TECLA * , por si se equivoca de lo que pulsa

void loop() {
   char key = keypad.getKey();
    
   if (key) { // si pulsa alguna tecla empezamos a guardar lo que se pulsa

      if (key == "#"){   // si pulsa el # es Intro
          int CODIGO_ERROR = 1; // con esta variable vamos a controlar si se ha escrito mal alguno de los códigos      

          if (ESCRIBE == CODIGO_ARMADO){  // SI SE HA ESCRITO EL CODIGO DE ARMADO PASAMOS LA ALARMA A ARMADO
            lcd_i2c.setCursor(1, 0);
            lcd_i2c.print("  ARMANDO ALARMA  ");
            lcd_i2c.setCursor(1, 1);
            lcd_i2c.print("       SALGA  ");
            delay ( TIEMPO_ARMADO ); // se utiliza el delay para evitar que se pueda pulsar una tecla mientras se arma, esto tiene esa ventaja pero como desventaja no permite desarmar la alarma mientras pasa este tiempo, si quieres puedes utilizar millis() y con eso no bloqueas el microcontrolador
            CODIGO_ERROR = 0;
            ARMADA = 1;
          }
          
          if (ESCRIBE == CODIGO_DESARME){  // SI SE HA ESCRITO EL CODIGO DE DESARME PASAMOS LA ALARMA A REPOSO
            lcd_i2c.setCursor(1, 0);
            lcd_i2c.print("  ALARMA DESARMADA  ");
            lcd_i2c.setCursor(1, 1);
            lcd_i2c.print("");
            delay (3000); // esperamos tres segundos para que vuelva aparecer la pantalla de introduzca código
            CODIGO_ERROR = 0;
            ARMADA = 0;
          }
          
          key = ""; // esto evita guardarlo en lo que se va recogiendo
          ESCRIBE = ""; // iniciamos la variable para empezar de nuevo
          
          // SI SE EQUIVOCA EN EL CODIGO DE ARMADO O EN EL DE DESARME , SE LO DECIMOS AL USUARIO PARA QUE LO ESCRIBA DE NUEVO
          if ( CODIGO_ERROR == 1 ){
              lcd_i2c.setCursor(1, 0);
              lcd_i2c.print("  CODIGO ERRONEO  ");
              lcd_i2c.setCursor(1, 1);
              lcd_i2c.print("  ESCRIBA DE NUEVO ");
              delay(2000); // esperamos dos segundos para que vuelva a poner el codigo 
          }
      }
      
      
      if (key == "*"){    // si pulsa el * es limpiar lo que se ha escrito hasta ahora
        ESCRIBE = "";
        key = ""; esto evita guardarlo en lo que se va recogiendo
      }

      ESCRIBE = ESCRIBE + key ; // vamos guardando lo que se pulsa
      lcd_i2c.setCursor(1, 0);
      lcd_i2c.print("INTRODUZCA CODIGO");
      lcd_i2c.setCursor(1, 1);
      lcd_i2c.print(ESCRIBE);  // Mostramos lo que se va pulsando
   }

   if ( ARMADA == 1 ){// SI LA ALARMA ESTA ARMADA ENTONCES CONTROLAMOS LOS SENSORES
     int salto = 0; // con esta variable controlamos el salto por los sensores
     int sensor_PIR = digitalRead(PIR);
     if (sensor_PIR == HIGH) salto = 1;
     int sensor_MAG1 = digitalRead(MAG1);
     if (sensor_MAG1 == HIGH) salto = 1;
     int sensor_MAG2 = digitalRead(MAG2);
     if (sensor_MAG2 == HIGH) salto = 1;

     if (salto == 1){  // EN EL CASO DE QUE ALGUNO DE LOS SENSORES PROVOQUE EL SALTO AQUI CONTROLAMOS QUE HACEMOS

          // ESTO TE LO DEJO A TI JUAN CARLOS A VER COMO CREES QUE SE DEBE HACER, SI TIENES PROBLEMAS ME LO DICES
          // TIENES QUE CONTROLAR:
          // EL TIEMPO CON MILLIS()
          // SI EL USUARIO NO PONE BIEN EL CODIGO ENTONCES ACTIVAS EL BUZZER
          // SI EL USUARIO PONE BIEN EL CODIGO ENTONCES NO TE PREOCUPAS POR QUE LA ALARMA PASARA A ARMADA = 0
     }
}
